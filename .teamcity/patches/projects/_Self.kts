package patches.projects

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.Project
import jetbrains.buildServer.configs.kotlin.v2019_2.ProjectFeature
import jetbrains.buildServer.configs.kotlin.v2019_2.projectFeatures.S3Storage
import jetbrains.buildServer.configs.kotlin.v2019_2.projectFeatures.s3Storage
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the root project
accordingly, and delete the patch script.
*/
changeProject(DslContext.projectId) {
    features {
        val feature1 = find<ProjectFeature> {
            feature {
                type = "storage_settings"
                id = "PROJECT_EXT_2"
                param("bucket-name", "dkirkhmeier-test")
                param("credentials.type", "key")
                param("secure:access-key", "credentialsJSON:92484592-b422-4bbd-a641-4e5350dbafa6")
                param("storage.name", "google stoarge")
                param("storage.type", "google-storage")
            }
        }
        feature1.apply {
        }
        val feature2 = find<S3Storage> {
            s3Storage {
                id = "PROJECT_EXT_9"
                storageName = "parentS3"
                bucketName = "artifacts.dkirkhmeier.nl"
                bucketPrefix = "settings"
                enablePresignedURLUpload = true
                multipartThreshold = "8MB"
                multipartChunksize = "6MB"
                cloudFrontEnabled = true
                cloudFrontDistribution = "ELP77HKIVPCH0"
                cloudFrontPublicKeyId = "K764NWNQODVAO"
                cloudFrontPrivateKey = "credentialsJSON:d3ae9544-9757-4984-b158-826eb8728123"
                accessKey = "credentialsJSON:92420876-353c-4fe1-90a0-9c3ce6b6fafe"
                awsEnvironment = default {
                    awsRegionName = "eu-west-2"
                }
                accessKeyID = "AKIA5JH2VERVF6FH2TFT"
                param("aws.credentials.type", "aws.access.keys")
                param("storage.s3.acl", "BucketOwnerFullControl")
            }
        }
        feature2.apply {
            cloudFrontEnabled = false
            param("cloudfrontKeyPairSelect", "K764NWNQODVAO")
            param("cloudfrontDistributionSelect", "ELP77HKIVPCH0")
            param("aws.use.default.credential.provider.chain", "")
        }
    }
}
